# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:11:33+00:00



import argparse
import json
import os
from datetime import date
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    BasicModelStatsResp,
    BooleanResp,
    BrandResp,
    BucketResp,
    DealershipDataPaginatedResp,
    DealershipDataResp,
    EndpointList,
    GenericResponse,
    HistoryResp,
    HTTPValidationError,
    JSONWebToken,
    ListingResp,
    ModelResp,
    ModelYearDistResp,
    RegionResp,
    SimilarSalePriceResp,
    SubUserJSONWebToken,
    TopModelResp,
)

app = MCPProxy(
    description='<div style="">This API provides access to our Automotive Data. Use of this API is subject to our <a href="https://autodealerdata.com/tos">Terms of Service</a></div>\n&nbsp;\n<h3 style="">For a quick start guide <a href="/APIQuickStart">click here</a></h3>\n&nbsp;\n<div> If you signed up through RapidAPI make your test calls <a href="https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive">here</a></div>\n&nbsp;\n<div>The general workflow is to: <br/>&nbsp;<div><strong>1.</strong> Authenticate with your CIS Automotive API Keys to get a Json Web Token (JWT). Do not use RapidAPI keys.</div>\n<div><div><strong>2.</strong> Then use that token as an argument when calling other endpoints.</div>\n&nbsp;\n<div>Equivalent HTTP GET and POST methods are available for some endpoints. </div>\n&nbsp;\n<div>Endpoints may appear more than once on this page if they are associated with multiple tags. eg "Sales Data", "Premium", "Pro Plan or Greater" To see which endpoints are included in different\nplans look under the "X Plan or Greater" tags for the respective plan name.</div>\n&nbsp;\n<h3>If you signed up for our API through RapidAPI you can make your test calls <a href="https://rapidapi.com/competitive-intelligence-solutions-llc-competitive-intelligence-solutions-llc-default/api/cis-automotive">on their platform</a>. \nYour RapidAPI credentials will not work on this page.</h3><h3> Do not use your RapidAPI keys on this page.</h3>\n<h3>If you signed up with us and have an account, you must first authenticate with your API Keys \nand retrieve a Json Web Token (JWT) from the /getToken endpoint to access the other endpoints.</h3> \n\n<h3>Your JWT is a required argument to all endpoints.</h3></div>',
    title='CIS Automotive API',
    version='1.0',
)


@app.get(
    '/daysSupply',
    description=""" Average, median, standard deviation, population variance, and whole region average of the 
days of supply left on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on
a dealer by dealer basis while the whole region average treats the entire region like a single dealership. 
The average field may differ from the whole region average, especially when dealers are out of 
a given model. 

The available brand and region names can be retrieved from their respective endpoints. """,
    tags=['supply_analysis', 'dealer_data_retrieval', 'region_data_management'],
)
def days_supply_days_supply_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Days worth of supply left on dealer lots
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/daysToSell',
    description=""" Average, median, standard deviation, population variance, and whole region average of the 
number of days a vehicle spends on dealer lots for a given brand and region. The average, median, stdDev, and pVar fields are calculated on
a dealer by dealer basis while the whole region average treats the entire region like a single dealership. 
The average field may differ from the whole region average.

The available brand and region names can be retrieved from their respective endpoints. """,
    tags=['supply_analysis', 'sales_data_analysis', 'vehicle_market_insights'],
)
def days_to_sell_days_to_sell_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Days a vehicle takes to sell
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getBrands',
    description=""" Get vehicle brand names. 

These names are used as arguments for other endpoints. The names are generally not case sensitive
when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes. """,
    tags=['brand_information', 'jwt_handling'],
)
def get_brand_names_get_brands_get(jwt: str):
    """
    Get a list of brand names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getDealers',
    description=""" Premium. Dealership information in a given zip code using the first 4 digits. Returns name, address, state, zipCode, and IDs.
For example a call with the zip code 92701 would return dealers with zip codes in the range [92700, 92709] """,
    tags=['dealer_data_retrieval', 'listing_retrieval', 'jwt_handling'],
)
def get_dealers_get_dealers_get(jwt: str, zip_code: int = Query(..., alias='zipCode')):
    """
    Premium. Dealers in a zip code.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getDealersByID',
    description=""" Premium. Dealership information using the internal ID. Returns name, address, state, zipCode, and ID for a single dealer in the same format as the /getDealers endpoint.
Dealer IDs are generally retrieved via the /getDealers or /getDealersByRegion endpoints. """,
    tags=['dealer_data_retrieval', 'jwt_handling'],
)
def get_dealers_get_dealers_by_i_d_get(
    jwt: str, dealer_i_d: int = Query(..., alias='dealerID')
):
    """
    Premium. Dealers by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getDealersByRegion',
    description=""" Premium. Dealership information in a given region. Returns name, address, state, zipCode, and IDs. Results are paginated with up to 30 results per page. """,
    tags=['dealer_data_retrieval', 'region_data_management', 'jwt_handling'],
)
def get_dealers_get_dealers_by_region_get(
    jwt: str,
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
    page: Optional[int] = 1,
):
    """
    Premium. Dealers in a region.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getInactiveModels',
    description=""" Get all model names including discontinued models. Because these models are no longer built, or have very poor market performance
they are not incuded in the normal getModels endpoint. Many users itterate through the model names with our new vehicle sales
endpoints and waste some of their quota making self contradictory requests. This endpoint was created to aleviate the use case where
someone requests information on new vehicle sales for a model that has not been sold new for a long, long, time. 

These names are used as arguments for other endpoints. The names are generally not case sensitive
when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes. """,
    tags=['model_information_management', 'brand_information'],
)
def get_model_names_all_get_inactive_models_get(
    jwt: str, brand_name: str = Query(..., alias='brandName')
):
    """
    Get a list of model names including discontinued models
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getModels',
    description=""" Get brand model names for currently active models. This endpoint does not return model names that have been discontinued or have 
sold less than 10 vehicles in the last month and a half.

These names are used as arguments for other endpoints. The names are generally not case sensitive
when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes. """,
    tags=['model_information_management', 'brand_information'],
)
def get_model_names_get_models_get(
    jwt: str, brand_name: str = Query(..., alias='brandName')
):
    """
    Get a list of model names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRegionBrandMarketShare',
    description=""" Market share of a given brand in a given region by number of vehicles sold over the last 45 days. """,
    tags=['brand_information', 'region_data_management', 'vehicle_market_insights'],
)
def get_region_brand_market_share_get_region_brand_market_share_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Market share of a brand in region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRegionMarketShare',
    description=""" Market share of a all brands in a given region by number of vehicles sold over the last 45 days. """,
    tags=['brand_information', 'region_data_management', 'vehicle_market_insights'],
)
def get_region_market_share_get_region_market_share_get(
    jwt: str, region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName')
):
    """
    Market share of all brands in region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRegions',
    description=""" Get region names. These names are used as arguments for other endpoints. The names are generally not case sensitive
when used with other endpoints, but it is best practice to use the names returned by this endpoint without changes. """,
    tags=['region_data_management', 'jwt_handling'],
)
def get_regions_get_regions_get(jwt: str):
    """
    Get a list of region names
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getSubUserKeys',
    description=""" Get a list of your issued SubUser API Keys. Includes active and revoked keys. """,
    tags=['sub_user_key_management'],
)
def get_sub_user_keys_get_sub_user_keys_get(
    api_i_d: str = Query(..., alias='apiID'), api_key: str = Query(..., alias='apiKey')
):
    """
    Get all Sub User Keys associated with your account.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getToken',
    description=""" This is the first function you should call. 

If you are accessing our API through a third party provider they will handle authenticating to our API for you 
and you will not need call this function or retrieve a JSON Web Token. 

All other functions require the JSON Web Token (JWT) from this function to 
be incuded in their arguments. The value of the "token" field is the actual JWT and any other values in the returned JSON
are metadata there for your convenience. Tokens are valid for a default of 1 hour (3600 seconds). If you try calling an
API endpoint with a missing, invalid, or expired JWT it will return a HTTP 403 code. You would then need to call this end point
to get a new token. """,
    tags=['jwt_handling'],
)
def make_token_get_token_get(
    api_i_d: str = Query(..., alias='apiID'), api_key: str = Query(..., alias='apiKey')
):
    """
    Get a JWT from your API credentials
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getToken',
    description=""" This is the first function you should call. 

If you are accessing our API through a third party provider they will handle authenticating to our API for you 
and you will not need call this function or retrieve a JSON Web Token. 

All other functions require the JSON Web Token (JWT) from this function to 
be incuded in their arguments. The value of the "token" field is the actual JWT and any other values in the returned JSON
are metadata there for your convenience. Tokens are valid for a default of 1 hour (3600 seconds). If you try calling an
API endpoint with a missing, invalid, or expired JWT it will return a HTTP 403 code. You would then need to call this end point
to get a new token. """,
    tags=['jwt_handling'],
)
def make_token_get_token_post(
    api_i_d: str = Query(..., alias='apiID'), api_key: str = Query(..., alias='apiKey')
):
    """
    Get a JWT from your API credentials
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listPrice',
    description=""" Average, median, standard deviation, and population variance of the ask price of new vehicles over the last 15 days for a given brand and region.

The available brand and region names can be retrieved from their respective endpoints. """,
    tags=['brand_information', 'vehicle_market_insights', 'sales_data_analysis'],
)
def get_avg_list_price_list_price_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Stats on ask price of new vehicles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listings',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns a dealer's listings over the last 45 days by dealer ID. The ID can be found by calling the /getDealers endpoint. 
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['dealer_data_retrieval', 'listing_retrieval'],
)
def get_listings_by_dealer_listings_get(
    jwt: str,
    dealer_i_d: int = Query(..., alias='dealerID'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
):
    """
    Listings by Dealer ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listings2',
    description=""" Generic getter for listings supporting a wide array of selection criteria. This is the new primary listing endpoint and we will phase out the older listing endpoints over time.
The other listing endpoints return the same data, but are more restrictive in the available geographic and vehicle selection criteria and can be replicated by this endpoint.

Dealer selection uses the most restrictive criteria supplied. From most restrictive to least: dealerID, gps, zipCode, region. You must provide some dealer selection criteria.

It is important to note that the units in the longitude are in degrees east, not degrees west. For example the coordinates 45.53N, 100.41W correspond to Mobridge, SC 
but they will be interpreted as 45.53N, 100.41E which corresponds to a point in the Gobi Desert near Jinst, Mongolia. You can fix this by converting the longitiude yourself, 
or by supplying a negative value (-100.41). For this example both (X, -100.41) and (X, 259.59) would be the same point. Units on the radius are miles and a smaller radius will
result in a faster response time. Maximum search radius depends on your subscription plan. 

The radius value is used for GPS searches and (optionally) zipCode searches. It is ignored for searches using other location criteria. If you provide a radius value with a zipCode
search, the zipCode will be mapped to GPS coordinates behind the scenes. If no radius is provided or if the zipCode to GPS mapping fails,
the API will only search for vehicles at dealerships within the provided zipCode.

Listing selection logically ANDs all options given. 

Time interval selection will prefer explicit start and end dates. If only one of startDate/endDate is supplied, this endpoint will use it 
as an anchor and look forward or backwards by the daysBack value. If startDate is specified and endDate is not, then endDate will be set to startDate+daysBack. 
Conversely if endDate is specified, but startDate is not then startDate will be set at endDate-daysBack.
If neither is supplied endpoint will set endDate to today and startDate to today-daysBack.

Maximum time interval is 45 days.

Mileage selection uses the provided mileage values and returns vehicles with mileage in the range [mileageLow, mileageHigh].
If mileageLow == mileageHigh (for example both are 0 default) this endpoint will not filter based on mileage. Not all used vehicles have a mileage record available. 

ExtendedSearch modifies the slice of listings returned. If false (default) it only returns vehicles satisfying lastSeen >= startDate and lastSeen < endDate.
If true it will return vehicles that were in dealer's inventory at any point between startDate and endDate including vehicles that were sold after endDate.
Setting extendedSearch to true will result in a slower response time. 

For example: If both a region name and dealer ID are supplied the dealer ID will be used because it is the most restrictive.

If a brandName of Ford and modelYear of 2019, modelName of F-150, and newCars of False is supplied this endpoint will return 
used 2019 model year Ford F-150s. If a contradictory listing selection is supplied (for example Ford + Camry) no listings will be returned
because the request matched no listings.

Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=[
        'listing_retrieval',
        'dealer_data_retrieval',
        'model_information_management',
        'region_data_management',
    ],
)
def get_listings2_listings2_get(
    jwt: str,
    dealer_i_d: Optional[int] = Query(0, alias='dealerID'),
    zip_code: Optional[int] = Query(0, alias='zipCode'),
    latitude: Optional[float] = 0,
    longitude: Optional[float] = 0,
    radius: Optional[float] = 0,
    region_name: Optional[str] = Query(None, alias='regionName'),
    brand_name: Optional[str] = Query(None, alias='brandName'),
    model_name: Optional[str] = Query(None, alias='modelName'),
    model_year: Optional[int] = Query(0, alias='modelYear'),
    mileage_low: Optional[int] = Query(0, alias='mileageLow'),
    mileage_high: Optional[int] = Query(0, alias='mileageHigh'),
    start_date: Optional[date] = Query(None, alias='startDate'),
    end_date: Optional[date] = Query(None, alias='endDate'),
    days_back: Optional[int] = Query(45, alias='daysBack'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
    extended_search: Optional[bool] = Query(False, alias='extendedSearch'),
):
    """
    Flexible Listing Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listingsByDate',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns a dealer's listings over the given timespan by dealer ID. The ID can be found by calling the /getDealers endpoint. 
Maximum time interval between startDate and endDate is 45 days.
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['dealer_data_retrieval', 'listing_retrieval'],
)
def get_listings_by_dealer_listings_by_date_get(
    jwt: str,
    dealer_i_d: int = Query(..., alias='dealerID'),
    start_date: date = Query(..., alias='startDate'),
    end_date: date = Query(..., alias='endDate'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
):
    """
    Listings by Dealer ID and Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listingsByRegion',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns a dealer's listings over up to the last 45 days by region. 
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['listing_retrieval', 'region_data_management'],
)
def get_listings_by_region_listings_by_region_get(
    jwt: str,
    region_name: str = Query(..., alias='regionName'),
    model_name: str = Query(..., alias='modelName'),
    days_back: Optional[int] = Query(10, alias='daysBack'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
):
    """
    Listings by Region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listingsByRegionAndDate',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns listings active in a region in the given date range [startdate, endDate), or in other words dates that satisfy startDate <= X < endDate. Maximum range is 45 days 
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['listing_retrieval', 'region_data_management'],
)
def get_listings_by_region_and_date_listings_by_region_and_date_get(
    jwt: str,
    region_name: str = Query(..., alias='regionName'),
    model_name: str = Query(..., alias='modelName'),
    start_date: date = Query(..., alias='startDate'),
    end_date: date = Query(..., alias='endDate'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
):
    """
    Listings by Region and Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listingsByZipCode',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns a dealer's listings over up to the last 45 days in the provided dealerhip's zip code. For example 92701.
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['listing_retrieval', 'dealer_data_retrieval'],
)
def listings_by_zip_code_listings_by_zip_code_get(
    jwt: str,
    zip_code: int = Query(..., alias='zipCode'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
    model_name: Optional[str] = Query(None, alias='modelName'),
):
    """
    Listings by ZipCode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listingsByZipCodeAndDate',
    description=""" See /listings2 endpoint for more flexible listing search.
Returns a dealer's listings over up to the last 45 days in the provided dealership's zip code. For example 92701.
Listing keys are: vin, askPrice, msrp, isNew, firstSeen, lastSeen, modelName, brandName.
Results are paginated in chunks of up to 20 vehicles. Prices are in the dealer's local currency (generally USD). """,
    tags=['listing_retrieval', 'dealer_data_retrieval'],
)
def listings_by_zip_code_and_date_listings_by_zip_code_and_date_get(
    jwt: str,
    zip_code: int = Query(..., alias='zipCode'),
    start_date: date = Query(..., alias='startDate'),
    end_date: date = Query(..., alias='endDate'),
    page: Optional[int] = 1,
    new_cars: Optional[bool] = Query(True, alias='newCars'),
    model_name: Optional[str] = Query(None, alias='modelName'),
):
    """
    Listings by ZipCode and Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/makeSubUserKey',
    description=""" This endpoint is only fully available to users with a paid plan. Users on Basic or Trial plans may only create keys valid on the "localhost" domain.
This endpoint creates an API key that can be embedded in frontend applications such as web pages that allow your users to directly make API calls. 
The "endpoints" value is an array of strings that name the allowed endpoints that may be called using the Sub User Key. Passing a "*" value in the array will allow
all endpoints that require a JWT (JSON Web Token) to be called by the Sub User Key. The keys are valid for as long as your account is valid or you revoke the Sub User Key.
All API calls made by the Sub User Keys are billed to your account. Additionally you should not call this endpoint or the /revokeSubUserKey endpoint at a combined rate 
higher than once per second.  """,
    tags=['sub_user_key_management', 'jwt_handling'],
)
def make_sub_user_key_make_sub_user_key_post(
    api_i_d: str = Query(..., alias='apiID'),
    api_key: str = Query(..., alias='apiKey'),
    site_name: Optional[str] = Query('localhost', alias='siteName'),
    body: EndpointList = ...,
):
    """
    Generate a Sub User Key that can be used by your users to make API calls in frontend applications.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/modelYearDist',
    description=""" Market share of used vehicles over the last 45 days by model and year. All values are relative to vehicles of the same model.
For example: a percentOfMarket value of 25, year of 2017, and modelName of Camry means that 25% of used Camrys on the market 
in the given region over the last 45 days were from the 2017 model year. """,
    tags=[
        'brand_information',
        'model_information_management',
        'vehicle_market_insights',
    ],
)
def get_model_used_dist_model_year_dist_get(
    jwt: str,
    model_name: str = Query(..., alias='modelName'),
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Used market share of model year by model
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/regionDailySales',
    description=""" Get regional sales by brand and day. Most recent data is typically only 2 days old for this endpoint.
    
The Day field is in YYYY-MM-DD format. For example if you wanted sales data from April 5th of 2020 the day field would be '2020-04-05'

Data availability depends on region and goes back up to 2016. """,
    tags=['brand_information', 'sales_data_analysis', 'region_data_management'],
)
def get_dealer_sales_region_daily_sales_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: str = Query(..., alias='regionName'),
    day: date = ...,
):
    """
    Brand sales by region and Day
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/regionSales',
    description=""" Premium. Get regional sales by brand and month, broken down by day. Most recent data is typically only 2 days old for this endpoint.
    
The month field is in YYYY-MM-DD format. For example if you wanted sales data from April of 2020 the month field would be '2020-04-01'

Data availability depends on region and goes back up to 2016. """,
    tags=['sales_data_analysis', 'brand_information', 'region_data_management'],
)
def get_dealer_sales_region_sales_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: str = Query(..., alias='regionName'),
    month: date = ...,
):
    """
    Premium. Brand sales by region and month
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/revokeSubUserKey',
    description=""" Revoke a SubUser API Key with the given UUID. This action can not be undone. """,
    tags=['sub_user_key_management'],
)
def revoke_sub_user_key_revoke_sub_user_key_put(
    api_i_d: str = Query(..., alias='apiID'),
    api_key: str = Query(..., alias='apiKey'),
    sub_user_key_u_u_i_d: str = Query(..., alias='subUserKeyUUID'),
):
    """
    Revoke a Sub User Key associated with your account.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/salePrice',
    description=""" Average, median, standard deviation, and population variance of the sale price of new vehicles over the last 15 days for a given brand and region.

The available brand and region names can be retrieved from their respective endpoints. """,
    tags=[
        'sales_data_analysis',
        'brand_information',
        'region_data_management',
        'vehicle_market_insights',
    ],
)
def get_avg_sale_price_sale_price_get(
    jwt: str,
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Stats on sale price of new vehicles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/salePriceHistogram',
    description=""" Histogram of the sale price of vehicles over the last 45 days for a given model and region. 
Price buckets are grouped in units of $1000
The available brand, model, and region names can be retrieved from their respective endpoints. """,
    tags=[
        'sales_data_analysis',
        'model_information_management',
        'vehicle_market_insights',
    ],
)
def get_model_sale_buckets_sale_price_histogram_get(
    jwt: str,
    model_name: str = Query(..., alias='modelName'),
    brand_name: str = Query(..., alias='brandName'),
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
):
    """
    Histogram of sales price of new vehicles by model
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/similarSalePrice',
    description=""" Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new and used vehicles in a given region based off the provided VIN. 
Optionally restricts report to vehicles of the same model year and goes back up to 120 days. """,
    tags=['vehicle_market_insights', 'listing_retrieval', 'vin_information_services'],
)
def get_market3_similar_sale_price_get(
    jwt: str,
    vin: str = ...,
    region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName'),
    days_back: Optional[int] = Query(45, alias='daysBack'),
    same_year: Optional[bool] = Query(False, alias='sameYear'),
):
    """
    Premium. Simple Vehicle Market Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/topModels',
    description=""" Sales ranking of different models by region over the last 45 days. 
The <strong>percentOfTopSales</strong> value is the percent of the top seller the model represents. 

For example: a value of 80% means that model sold 8 vehicles for every 10 of the top model sold.

The other fields represent the model percent of X. The <strong>brandMarketShare</strong> field is that brand's market share of the region
over the report's time interval. """,
    tags=[
        'model_information_management',
        'vehicle_market_insights',
        'region_data_management',
    ],
)
def get_top_models_top_models_get(
    jwt: str, region_name: Optional[str] = Query('REGION_STATE_CA', alias='regionName')
):
    """
    Top models in a given region
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/valuation',
    description=""" Premium. Provides the average, stdDev, and count, of the sale price and mileage of similar new or used vehicles based off the provided VIN 
and matching the provided other search criteria. This endpoint can be easily used to determine market values in arbitrary geographic locations (like a city)
for specific vehicles.
See /listings2 endpoint for documentation on location, vehicle, and time search parameters. 
Date selection is restricted by your subscription tier, same as with the /listings2 endpoint.
Optionally restricts report to vehicles of the same model year.  """,
    tags=['listing_retrieval', 'vehicle_market_insights', 'dealer_data_retrieval'],
)
def get_market4_valuation_get(
    jwt: str,
    vin: str = ...,
    dealer_i_d: Optional[int] = Query(0, alias='dealerID'),
    zip_code: Optional[int] = Query(0, alias='zipCode'),
    latitude: Optional[float] = 0,
    longitude: Optional[float] = 0,
    radius: Optional[float] = 0,
    region_name: Optional[str] = Query(None, alias='regionName'),
    mileage_low: Optional[int] = Query(0, alias='mileageLow'),
    mileage_high: Optional[int] = Query(0, alias='mileageHigh'),
    start_date: Optional[date] = Query(None, alias='startDate'),
    end_date: Optional[date] = Query(None, alias='endDate'),
    days_back: Optional[int] = Query(45, alias='daysBack'),
    new_cars: Optional[bool] = Query(False, alias='newCars'),
    extended_search: Optional[bool] = Query(False, alias='extendedSearch'),
    same_year: Optional[bool] = Query(False, alias='sameYear'),
):
    """
    Premium. Simple Vehicle Market Report Over Arbitrary Locations and Vehicles.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vehicleHistory',
    description=""" Premium. Provides a simple report detailing a vechicle's sales history at dealerships. Data includes the name of the dealership, dates it was for sale,
price, new/used condition, mileage, dealership state, and dealership zip code. Data availability goes back to early 2016. 

If your use case involves checking if a vehicle has appeared on the open market on or after a given date see 
the /vehicleSeen endpoint. """,
    tags=['vehicle_history_retrieval', 'vin_information_services'],
)
def get_history2_vehicle_history_get(jwt: str, vin: str = ...):
    """
    Premium. Simple Vehicle History Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vehicleSeen',
    description=""" Checks our database to see if we have data on a VIN that appeared on the open market on or after the given date with a True/False response. 
This endpoint is more cost effective than the /vehicleHistory endpoint if your use case
requires searching a large list of vehicles with a low individual likelyhood of appearing on the open market. (For example searching for a specific stolen vehicle). """,
    tags=['vin_information_services', 'vehicle_market_insights'],
)
def get_vehicle_seen_vehicle_seen_get(
    jwt: str, vin: str = ..., after_date: date = Query(..., alias='afterDate')
):
    """
    Checks if a VIN appeared on the market on or after a given date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/vinDecode',
    description=""" Decodes the provided North American vin and provides recall information if available. 
We require at least the first 12 out of 17 characters in the vin to attempt a decode. The vin is not case sensitive.
If passEmpty (default False) is True we will also include the empty fields in the response json. 
If includeRecall (default True) is True we will include recall data reported to the NHTSA. Set False for a faster response. """,
    tags=['vin_information_services', 'jwt_handling'],
)
def vin_decode_vin_decode_get(
    jwt: str,
    vin: str = ...,
    pass_empty: Optional[bool] = Query(False, alias='passEmpty'),
    include_recall: Optional[bool] = Query(True, alias='includeRecall'),
):
    """
    Vin decoder and Recall Info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
